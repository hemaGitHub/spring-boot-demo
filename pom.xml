<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--
    Maven users can inherit from the spring-boot-starter-parent project to obtain sensible defaults. The parent project provides the following features:
    1.Java 1.6 as the default compiler level.
    2.UTF-8 source encoding.
    3.A Dependency Management section, allowing you to omit <version> tags for common dependencies, inherited from the spring-boot-dependencies POM.
    4.Sensible resource filtering.
    5.Sensible plugin configuration (exec plugin, surefire, Git commit ID, shade).
    6.Sensible resource filtering for application.properties and application.yml including profile-specific files (e.g. application-foo.properties and application-foo.yml)
    On the last point: since the default config files accept Spring style placeholders (${…​}) the Maven filtering is changed to use @..@ placeholders (you can override that with a Maven property resource.delimiter).
    -->
   <!-- <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.1.RELEASE</version>
    </parent>-->

    <groupId>com.chengc</groupId>
    <artifactId>spring-boot-demo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <properties>
    <!--    <spring-boot.version>1.5.2.RELEASE</spring-boot.version>
        <spring.version>5.0.0.BUILD-SNAPSHOT</spring.version>-->
        <spring.version>4.3.3.RELEASE</spring.version>
        <spring-boot.version>1.4.1.RELEASE</spring-boot.version>
        <fastjson.version>1.2.16</fastjson.version>
    </properties>

    <dependencies>
        <!--
        That setup does not allow you to override individual dependencies using a property as explained above.
        To achieve the same result, you’d need to add an entry in the dependencyManagement of your project before the spring-boot-dependencies entry.
        For instance, to upgrade to another spring-boot-starter-web you’d add the following to your pom.xml.-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <!--Not everyone likes inheriting from the spring-boot-starter-parent POM.
        You may have your own corporate standard parent that you need to use, or you may just prefer to explicitly declare all your Maven configuration.
        If you don’t want to use the spring-boot-starter-parent,
        you can still keep the benefit of the dependency management (but not the plugin management) by using a scope=import dependency:-->
        <dependency>
            <!-- Import dependency management from Spring Boot -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-dependencies</artifactId>
            <version>1.4.1.RELEASE</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--Spring Boot includes a Maven plugin that can package the project as an executable jar.-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
            </plugin>
        </plugins>
    </build>

</project>